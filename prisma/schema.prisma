generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model channels {
  id          String          @id @default(cuid())
  user_id     String?         @db.VarChar(255)
  name        String          @db.VarChar(255)
  description String          @db.LongText
  image       String          @db.VarChar(255)
  email       String          @db.VarChar(255)
  nik         String          @db.VarChar(255)
  ktp_photo   String          @db.VarChar(255)
  phone       String          @db.VarChar(255)
  status      channels_status @default(UNVERIFIED)
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  users       users?          @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "channels_ibfk_1")
  events      events[]
  follows     follows[]

  @@index([user_id], map: "user_id")
}

model events {
  id          Int           @id @default(autoincrement())
  channel_id  String?       @db.VarChar(255)
  tag_id      String?       @db.VarChar(255)
  name        String?       @db.VarChar(255)
  description String?       @db.LongText
  image       String?       @db.VarChar(255)
  location    String?       @db.VarChar(255)
  price       Float?
  status      events_status @default(ONGOING)
  capacity    Int           @default(0)
  stock       Int           @default(0)
  event_date  DateTime?     @db.DateTime(0)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  channels    channels?     @relation(fields: [channel_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "events_ibfk_1")
  tags        tags?         @relation(fields: [tag_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "events_ibfk_3")
  
  favorites   favorites[]
  user_events user_events[]

  @@index([channel_id], map: "channel_id")
  @@index([tag_id], map: "tag_id")
}

model favorites {
  id         String   @id @default(cuid())
  user_id    String?  @db.VarChar(255)
  event_id   Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "favorites_ibfk_1")
  events     events?  @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "favorites_ibfk_2")

  @@index([event_id], map: "event_id")
  @@index([user_id], map: "user_id")
}

model follows {
  id         String    @id @default(cuid())
  user_id    String?   @db.VarChar(255)
  channel_id String?   @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "follows_ibfk_1")
  channels   channels? @relation(fields: [channel_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "follows_ibfk_2")

  @@index([channel_id], map: "channel_id")
  @@index([user_id], map: "user_id")
}

model tags {
  id         String   @id @default(cuid())
  name       String?  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  events     events[]
}

model user_events {
  id         String    @id @default(cuid())
  user_id    String?   @db.VarChar(255)
  event_id   Int?
  status     Boolean?
  qty        Int 
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  tickets    tickets[]
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_events_ibfk_1")
  events     events?   @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_events_ibfk_2")

  @@index([event_id], map: "event_id")
  @@index([user_id], map: "user_id")
}

model users {
  id             String        @id @default(cuid())
  wallet_address String        @unique @db.VarChar(255)
  role           users_role?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  channels       channels[]
  favorites      favorites[]
  follows        follows[]
  user_events    user_events[]
}

model tickets {
  id            String       @id @default(cuid())
  status        Boolean      @default(false)
  user_events   user_events? @relation(fields: [user_eventsId], references: [id])
  user_eventsId String?
}

enum users_role {
  ADMIN
  USER
}

enum events_status {
  DONE
  CANCELED
  ONGOING
}

enum channels_status {
  VERIFIED
  UNVERIFIED
}
